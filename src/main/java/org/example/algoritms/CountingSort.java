package org.example.algoritms;

/**
 * Сортировка подсчётом
 *
 * Алгоритм сортировки, в котором используется диапазон чисел сортируемого массива (списка)
 * для подсчёта совпадающих элементов.
 *
 * Линейная скорость выполнения.
 *
 * Применение сортировки подсчётом целесообразно лишь тогда, когда сортируемые числа имеют (или их можно отобразить в)
 * диапазон возможных значений, который достаточно мал по сравнению с сортируемым множеством,
 * например, миллион натуральных чисел меньших 1000.
 *
 * Наша задача - отсортировать все числа в массиве.
 * Известно, что все числа в массиве строго между 0 и 100.
 *
 */
public class CountingSort {
    public static void sort (int[] data) {
        // Размер равен количеству возможных значений входящего массива
        int[] counters = new int[101];

        // Индекс массива равен значению, а хранится в нём количество вхождений данного числа в сортируемом списке
        for (int datum : data) {
            counters[datum]++;
        }

        // Индекс для прохода по сортируемому списку
        int index = 0;
        // Внешний цикл для прохождения всех значений в массиве возможных значений
        // Внутренний цикл смотрит внутрь ячейки значений и берёт количество его повторений, столько раз нам необходимо записать его в исходный массив
        for (int i = 0; i < counters.length; i++) {
            for (int j = 0; j < counters[i]; j++) {
                data[index] = i;
                index++;
            }
        }
    }
}
